/// <reference types="node" />
/**
 * Deserialize an NBT value from `buffer`. This returns an object which is
 * the closest JavaScript equivalent of the input.
 * `TAG_LONG`s, which cannot be losslessly represented in a JavaScript
 * `number`, are deserialized as `Long`s from the
 * [`long`](https://www.npmjs.com/package/long) package.
 *
 * Deserialize an NBT value from `buffer`. This returns an object which is the closest JavaScript equivalent of the input.
 * `TAG_LONG`s, which cannot be losslessly represented in a JavaScript `number`, are deserialized as `Long`s from the [`long`](https://www.npmjs.com/package/long) package.
 *
 * The resulting object can be serialized into the same NBT value. This is explained fully in the `README`.
 *
 * @param buffer The buffer to deserialize the NBT from
 * @param useMaps Whether to use ES6 `Map`s for compounds. This is useful to retain insertion order
 * @param named Whether or not the root is named. For example, a typical structure is {"":<data>}. (Reasoning for this required)
 *
 * @throws If the NBT is malformed. E.g. an invalid tag type is specified or the NBT is truncated.
 */
export declare function deserializeNBT<T = unknown>(buffer: Buffer, useMaps?: boolean, named?: boolean): T;
/**
 * Same as `deserializeNBT`, but if `buffer` contains compressed data, it will be uncompressed automatically. If this behaviour is not required, use the synchronous `deserializeNBT` function instead.
 *
 * @param buffer The buffer to deserialize the NBT from.
 * @param useMaps to use ES6 maps for compounds. This is useful to retain insertion order
 * @param named Whether or not the root is named. For example, a typical structure is {"":<data>}.
 *
 * @throws If the NBT is malformed. E.g. an invalid tag type is specified or the NBT is truncated.
 * @throws If the compression is invalid
 */
export declare function deserializeCompressedNBT<T = unknown>(buffer: Buffer, useMaps?: boolean, named?: boolean): Promise<T>;
/**
 * Decompress a `Buffer` if required, returning the original Buffer otherwise
 *
 * @hidden Only exposed for tests
 */
export declare function decompressIfNeeded(buffer: Buffer): Promise<Buffer>;
