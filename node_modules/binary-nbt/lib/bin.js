#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cac = require("cac");
const fs_1 = require("fs");
const path_1 = require("path");
const mkdirp = require("mkdirp");
const util_1 = require("util");
const deserialize_1 = require("./deserialize");
const cli = cac("binary-nbt");
cli.command("[...files]", `Convert files from NBT into JSON, outputting them to stdout. 
If a directory is passed, it is recursively walked for files`)
    .option("-o, --out [dir]", "Place the resulting files into this directory instead")
    .option("-e, --extension [ext]", "Extension to output the JSON files in", {
    default: ".json"
})
    .example("binary-nbt some_dir file.nbt file.nbt.gz --output .")
    .example("binary-nbt some_dir -o result")
    .action(run);
const readAsync = util_1.promisify(fs_1.readFile);
const writeAsync = util_1.promisify(fs_1.writeFile);
const statAsync = util_1.promisify(fs_1.stat);
const childrenAsync = util_1.promisify(fs_1.readdir);
const mkdirpAsync = util_1.promisify(mkdirp);
async function run(files, options) {
    await Promise.all(files.map(file => {
        runOn(path_1.join(process.cwd(), file), options, files);
    }));
}
async function runOn(file, options, files) {
    if ((await statAsync(file)).isDirectory()) {
        await Promise.all((await childrenAsync(file)).map(child => runOn(path_1.join(file, child), options, files)));
    }
    else {
        try {
            const contents = await readAsync(file);
            const value = await deserialize_1.deserializeCompressedNBT(contents);
            const string = JSON.stringify(value);
            if (options.out) {
                const parsed = path_1.parse(file);
                if (options.extension !== "") {
                    parsed.ext = options.extension;
                    parsed.base = undefined;
                }
                const path = path_1.join(process.cwd(), options.out, path_1.relative(files.length === 1
                    ? path_1.join(process.cwd(), files[0])
                    : process.cwd(), path_1.format(parsed)));
                await mkdirpAsync(path_1.dirname(path));
                await writeAsync(path, string, { flag: "wx" }); // Do not overwrite an existing file
            }
            else {
                process.stdout.write(`${file}:\n${string}\n`);
            }
        }
        catch (error) {
            process.stdout.write(`Couldn't parse ${file} as NBT: ${error}. Skipping\n`);
            return;
        }
    }
}
cli.help();
cli.parse();
