import * as Long from "long";
/**
 * The `Symbol` used to store the type of the item in a `TAG_LIST`.
 * This is attached as a property on the `Array`.
 */
export declare const NBTListSymbol: unique symbol;
/**
 * The `Symbol` used to store the NBT Tag Type of a JavaScript `Object`.
 *
 * To set this for your own objects, use `createNBTType`. This can be inferred in a majority of cases.
 */
export declare const NBTTypeSymbol: unique symbol;
/**
 * The `Symbol` used to store the root name property of an NBT file.
 */
export declare const NBTNameSymbol: unique symbol;
/**
 * A mapping of `TAG_` names to the numbers used in the format.
 */
export declare enum TagType {
    TAG_BYTE = 1,
    TAG_SHORT = 2,
    TAG_INT = 3,
    TAG_LONG = 4,
    TAG_FLOAT = 5,
    TAG_DOUBLE = 6,
    TAG_BYTE_ARRAY = 7,
    TAG_STRING = 8,
    TAG_LIST = 9,
    TAG_COMPOUND = 10,
    TAG_INT_ARRAY = 11,
    TAG_LONG_ARRAY = 12
}
/**
 * Create a value which is to be serialized as a specific type.
 *
 * @param type The `TagType` which is to be serialized
 */
export declare function createNBTType<T>(value: T, type: TagType): T;
/**
 * Specify that a `number` should be serialized as a `TAG_BYTE`
 */
export declare const byte: <V extends number>(value: V) => V;
/**
 * Specify that a `number` should be serialized as a `TAG_SHORT`
 */
export declare const short: <V extends number>(value: V) => V;
/**
 * Specify that a `number` should be serialized as a `TAG_INT`
 */
export declare const int: <V extends number>(value: V) => V;
/**
 * Specify that this `number` should be serialized as a `TAG_LONG`
 *
 * This is pointless on a `Long`, which are serialized as
 * `TAG_LONG` unless specified otherwise
 */
export declare const long: <V extends number | Long>(value: V) => V;
/**
 * Specify that a `number` should be serialized as a `TAG_FLOAT`
 */
export declare const float: <V extends number>(value: V) => V;
/**
 * Specify that a `number` should be serialized as a `TAG_DOUBLE`
 *
 * This is pointless as `number`s, are serialized as
 * `TAG_DOUBLE` unless specified otherwise
 */
export declare const double: <V extends number>(value: V) => V;
/**
 * Specify that a `number[]` should be serialized as a `TAG_BYTE_ARRAY`.
 *
 * All the numbers must be integers between -128 and 127, otherwise an
 * error is thrown upon serialization.
 */
export declare const byteArray: <V extends number[]>(value: V) => V;
/**
 * Specify that a `string` should be serialized as a `TAG_STRING`
 */
export declare const string: <V extends string>(value: V) => V;
/**
 * Specify that an array should be serialized as a `TAG_LIST`.
 *
 * All the items must have the same `TAG_` type, otherwise an error
 * will be thrown upon serialisation. Where possible, this is automatically extracted.
 */
export declare const list: <V extends any[]>(value: V) => V;
/**
 * Specify that a value `any` should be serialized as a `TAG_COMPOUND`.
 *
 * This has no effect on any resulting NBT, and is only included for consistency
 */
export declare const compound: <V extends any>(value: V) => V;
/**
 * Specify that a `number[]` should be serialized as a `TAG_INT_ARRAY`.
 *
 * All the numbers must be integers between -2,147,483,648 and 2,147,483,647, otherwise an
 * error will be thrown upon serialization.
 */
export declare const intArray: <V extends number[]>(value: V) => V;
/**
 * Specify that a given `Long[]` should be serialized as a `TAG_LONG_ARRAY`
 */
export declare const longArray: <V extends Long[]>(value: V) => V;
