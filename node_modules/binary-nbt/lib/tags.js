"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The `Symbol` used to store the type of the item in a `TAG_LIST`.
 * This is attached as a property on the `Array`.
 */
exports.NBTListSymbol = Symbol("NBT list type");
/**
 * The `Symbol` used to store the NBT Tag Type of a JavaScript `Object`.
 *
 * To set this for your own objects, use `createNBTType`. This can be inferred in a majority of cases.
 */
exports.NBTTypeSymbol = Symbol("NBT node type");
/**
 * The `Symbol` used to store the root name property of an NBT file.
 */
exports.NBTNameSymbol = Symbol("NBT node name");
/**
 * A mapping of `TAG_` names to the numbers used in the format.
 */
var TagType;
(function (TagType) {
    TagType[TagType["TAG_BYTE"] = 1] = "TAG_BYTE";
    TagType[TagType["TAG_SHORT"] = 2] = "TAG_SHORT";
    TagType[TagType["TAG_INT"] = 3] = "TAG_INT";
    TagType[TagType["TAG_LONG"] = 4] = "TAG_LONG";
    TagType[TagType["TAG_FLOAT"] = 5] = "TAG_FLOAT";
    TagType[TagType["TAG_DOUBLE"] = 6] = "TAG_DOUBLE";
    TagType[TagType["TAG_BYTE_ARRAY"] = 7] = "TAG_BYTE_ARRAY";
    TagType[TagType["TAG_STRING"] = 8] = "TAG_STRING";
    TagType[TagType["TAG_LIST"] = 9] = "TAG_LIST";
    TagType[TagType["TAG_COMPOUND"] = 10] = "TAG_COMPOUND";
    TagType[TagType["TAG_INT_ARRAY"] = 11] = "TAG_INT_ARRAY";
    TagType[TagType["TAG_LONG_ARRAY"] = 12] = "TAG_LONG_ARRAY";
})(TagType = exports.TagType || (exports.TagType = {}));
/**
 * Create a value which is to be serialized as a specific type.
 *
 * @param type The `TagType` which is to be serialized
 */
function createNBTType(value, type) {
    // tslint:disable-next-line: prefer-object-spread `Object.assign` is used here for a reason - we need to be careful about constructors
    return Object.assign(value, { [exports.NBTTypeSymbol]: type });
}
exports.createNBTType = createNBTType;
function tagSpecifier(type) {
    return (v) => createNBTType(v, type);
}
/**
 * Specify that a `number` should be serialized as a `TAG_BYTE`
 */
exports.byte = tagSpecifier(TagType.TAG_BYTE);
/**
 * Specify that a `number` should be serialized as a `TAG_SHORT`
 */
exports.short = tagSpecifier(TagType.TAG_SHORT);
/**
 * Specify that a `number` should be serialized as a `TAG_INT`
 */
exports.int = tagSpecifier(TagType.TAG_INT);
/**
 * Specify that this `number` should be serialized as a `TAG_LONG`
 *
 * This is pointless on a `Long`, which are serialized as
 * `TAG_LONG` unless specified otherwise
 */
exports.long = tagSpecifier(TagType.TAG_LONG);
/**
 * Specify that a `number` should be serialized as a `TAG_FLOAT`
 */
exports.float = tagSpecifier(TagType.TAG_FLOAT);
/**
 * Specify that a `number` should be serialized as a `TAG_DOUBLE`
 *
 * This is pointless as `number`s, are serialized as
 * `TAG_DOUBLE` unless specified otherwise
 */
exports.double = tagSpecifier(TagType.TAG_DOUBLE);
/**
 * Specify that a `number[]` should be serialized as a `TAG_BYTE_ARRAY`.
 *
 * All the numbers must be integers between -128 and 127, otherwise an
 * error is thrown upon serialization.
 */
exports.byteArray = tagSpecifier(TagType.TAG_BYTE_ARRAY); // | Int8Array (TODO;
/**
 * Specify that a `string` should be serialized as a `TAG_STRING`
 */
exports.string = tagSpecifier(TagType.TAG_STRING);
/**
 * Specify that an array should be serialized as a `TAG_LIST`.
 *
 * All the items must have the same `TAG_` type, otherwise an error
 * will be thrown upon serialisation. Where possible, this is automatically extracted.
 */
exports.list = tagSpecifier(TagType.TAG_LIST);
/**
 * Specify that a value `any` should be serialized as a `TAG_COMPOUND`.
 *
 * This has no effect on any resulting NBT, and is only included for consistency
 */
exports.compound = tagSpecifier(TagType.TAG_COMPOUND);
/**
 * Specify that a `number[]` should be serialized as a `TAG_INT_ARRAY`.
 *
 * All the numbers must be integers between -2,147,483,648 and 2,147,483,647, otherwise an
 * error will be thrown upon serialization.
 */
exports.intArray = tagSpecifier(TagType.TAG_INT_ARRAY); // | Int32Array (TODO;
/**
 * Specify that a given `Long[]` should be serialized as a `TAG_LONG_ARRAY`
 */
exports.longArray = tagSpecifier(TagType.TAG_LONG_ARRAY);
