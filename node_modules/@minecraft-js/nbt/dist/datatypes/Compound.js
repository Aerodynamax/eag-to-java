"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NBT_Compound = void 0;
const __1 = require("..");
const Tag_1 = require("./Tag");
class NBT_Compound extends Tag_1.NBT_TAG {
    write(buf, payload) {
        this.payload = payload ?? this.payload;
        buf.writeBytes([NBT_Compound.id]);
        if (!this.isNameless) {
            buf.writeShort(this.name.length);
            buf.writeBytes(Buffer.from(this.name));
        }
        for (const tag of this.payload)
            tag.write(buf);
        return buf;
    }
    read(buf) {
        this.payload = [];
        while (true) {
            const id = buf.readBytes(1)[0];
            if (id === 0x00 || !id)
                break;
            const TagConstructor = __1.tags.find((t) => t.id === id);
            if (!TagConstructor)
                throw new Error(`Unknown tag id ${id}`);
            const tag = new TagConstructor(this.readTagName(buf));
            tag.read(buf);
            this.payload.push(tag);
        }
        return this.payload;
    }
    readTagName(buf) {
        const length = buf.readShort();
        return buf.readBytes(length).toString();
    }
}
exports.NBT_Compound = NBT_Compound;
NBT_Compound.id = Tag_1.TagType.Compound;
// See src/datatypes/index.ts to know why
__1.tags.push(NBT_Compound);
__1.tags.sort((a, b) => (a.id > b.id ? 1 : -1));
