"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NBT_List = void 0;
const __1 = require("..");
const getTagId_1 = require("../utils/getTagId");
const Tag_1 = require("./Tag");
class NBT_List extends Tag_1.NBT_TAG {
    write(buf, payload) {
        this.payload = payload ?? this.payload;
        const tag0Id = (0, getTagId_1.getTagId)(this.payload[0]);
        if (!this.payload.every((v) => v.isNameless && (0, getTagId_1.getTagId)(v) === tag0Id))
            throw new Error('Inside a NBT_List, all elements must be the same type and be nameless');
        buf.writeBytes([NBT_List.id]);
        if (!this.isNameless) {
            buf.writeShort(this.name.length);
            buf.writeBytes(Buffer.from(this.name));
        }
        buf.writeBytes([tag0Id]);
        buf.writeInt(this.payload.length);
        for (const tag of this.payload)
            tag.write(buf);
        return buf;
    }
    read(buf) {
        const id = buf.readBytes(1)[0];
        const length = buf.readInt();
        const TagConstructor = __1.tags.find((t) => t.id === id);
        if (!TagConstructor)
            throw new Error(`Unknown tag id ${id}`);
        this.payload = [];
        for (let i = 0; i < length; i++) {
            const tag = new TagConstructor();
            tag.read(buf);
            this.payload.push(tag);
        }
        return this.payload;
    }
}
exports.NBT_List = NBT_List;
NBT_List.id = Tag_1.TagType.List;
